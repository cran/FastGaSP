// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/FastGaSP.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// Construct_W0_matern_5_2
MatrixXd Construct_W0_matern_5_2(const double sigma2, const double lambda);
RcppExport SEXP _FastGaSP_Construct_W0_matern_5_2(SEXP sigma2SEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_W0_matern_5_2(sigma2, lambda));
    return rcpp_result_gen;
END_RCPP
}
// Construct_W0_exp
MatrixXd Construct_W0_exp(const double sigma2, const double lambda);
RcppExport SEXP _FastGaSP_Construct_W0_exp(SEXP sigma2SEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_W0_exp(sigma2, lambda));
    return rcpp_result_gen;
END_RCPP
}
// Construct_G_matern_5_2
List Construct_G_matern_5_2(Eigen::VectorXd delta_x, double lambda);
RcppExport SEXP _FastGaSP_Construct_G_matern_5_2(SEXP delta_xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_G_matern_5_2(delta_x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// Construct_G_exp
List Construct_G_exp(Eigen::VectorXd delta_x, double lambda);
RcppExport SEXP _FastGaSP_Construct_G_exp(SEXP delta_xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_G_exp(delta_x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// Construct_W_matern_5_2
List Construct_W_matern_5_2(double sigma2, Eigen::VectorXd delta_x, double lambda, MatrixXd W0);
RcppExport SEXP _FastGaSP_Construct_W_matern_5_2(SEXP sigma2SEXP, SEXP delta_xSEXP, SEXP lambdaSEXP, SEXP W0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type W0(W0SEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_W_matern_5_2(sigma2, delta_x, lambda, W0));
    return rcpp_result_gen;
END_RCPP
}
// Construct_W_exp
List Construct_W_exp(double sigma2, Eigen::VectorXd delta_x, double lambda, MatrixXd W0);
RcppExport SEXP _FastGaSP_Construct_W_exp(SEXP sigma2SEXP, SEXP delta_xSEXP, SEXP lambdaSEXP, SEXP W0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type W0(W0SEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_W_exp(sigma2, delta_x, lambda, W0));
    return rcpp_result_gen;
END_RCPP
}
// Get_Q_K
List Get_Q_K(const List GG, const List W, const Eigen::MatrixXd C0, const double VV);
RcppExport SEXP _FastGaSP_Get_Q_K(SEXP GGSEXP, SEXP WSEXP, SEXP C0SEXP, SEXP VVSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type GG(GGSEXP);
    Rcpp::traits::input_parameter< const List >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type C0(C0SEXP);
    Rcpp::traits::input_parameter< const double >::type VV(VVSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Q_K(GG, W, C0, VV));
    return rcpp_result_gen;
END_RCPP
}
// Get_log_det_S2
List Get_log_det_S2(const Eigen::VectorXd param, const bool have_noise, const Eigen::VectorXd delta_x, const Eigen::VectorXd output, const String kernel_type);
RcppExport SEXP _FastGaSP_Get_log_det_S2(SEXP paramSEXP, SEXP have_noiseSEXP, SEXP delta_xSEXP, SEXP outputSEXP, SEXP kernel_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const bool >::type have_noise(have_noiseSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type output(outputSEXP);
    Rcpp::traits::input_parameter< const String >::type kernel_type(kernel_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_log_det_S2(param, have_noise, delta_x, output, kernel_type));
    return rcpp_result_gen;
END_RCPP
}
// Get_L_inv_y
VectorXd Get_L_inv_y(const List GG, const double VV, const Eigen::VectorXd Q, const Eigen::MatrixXd K, const Eigen::VectorXd output);
RcppExport SEXP _FastGaSP_Get_L_inv_y(SEXP GGSEXP, SEXP VVSEXP, SEXP QSEXP, SEXP KSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type GG(GGSEXP);
    Rcpp::traits::input_parameter< const double >::type VV(VVSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type K(KSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_L_inv_y(GG, VV, Q, K, output));
    return rcpp_result_gen;
END_RCPP
}
// Get_C_R_K_Q
List Get_C_R_K_Q(const VectorXi index, const List GG, const List W, const Eigen::MatrixXd C0, double VV);
RcppExport SEXP _FastGaSP_Get_C_R_K_Q(SEXP indexSEXP, SEXP GGSEXP, SEXP WSEXP, SEXP C0SEXP, SEXP VVSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXi >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const List >::type GG(GGSEXP);
    Rcpp::traits::input_parameter< const List >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type C0(C0SEXP);
    Rcpp::traits::input_parameter< double >::type VV(VVSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_C_R_K_Q(index, GG, W, C0, VV));
    return rcpp_result_gen;
END_RCPP
}
// Get_m_a_pred
List Get_m_a_pred(const VectorXi index, const Eigen::VectorXd output_vec, const List GG, const Eigen::MatrixXd K);
RcppExport SEXP _FastGaSP_Get_m_a_pred(SEXP indexSEXP, SEXP output_vecSEXP, SEXP GGSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXi >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type output_vec(output_vecSEXP);
    Rcpp::traits::input_parameter< const List >::type GG(GGSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_m_a_pred(index, output_vec, GG, K));
    return rcpp_result_gen;
END_RCPP
}
// Get_S_KK
List Get_S_KK(const VectorXi index, const List GG, const List C, const List R);
RcppExport SEXP _FastGaSP_Get_S_KK(SEXP indexSEXP, SEXP GGSEXP, SEXP CSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXi >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const List >::type GG(GGSEXP);
    Rcpp::traits::input_parameter< const List >::type C(CSEXP);
    Rcpp::traits::input_parameter< const List >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_S_KK(index, GG, C, R));
    return rcpp_result_gen;
END_RCPP
}
// Get_s_1st
MatrixXd Get_s_1st(const List m, const List a, const List C, const List KK);
RcppExport SEXP _FastGaSP_Get_s_1st(SEXP mSEXP, SEXP aSEXP, SEXP CSEXP, SEXP KKSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type m(mSEXP);
    Rcpp::traits::input_parameter< const List >::type a(aSEXP);
    Rcpp::traits::input_parameter< const List >::type C(CSEXP);
    Rcpp::traits::input_parameter< const List >::type KK(KKSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_s_1st(m, a, C, KK));
    return rcpp_result_gen;
END_RCPP
}
// Kalman_smoother
List Kalman_smoother(const VectorXd param, const bool have_noise, const VectorXi index_obs, const VectorXd delta_x_all, const VectorXd output, const double sigma_2_hat, const String kernel_type);
RcppExport SEXP _FastGaSP_Kalman_smoother(SEXP paramSEXP, SEXP have_noiseSEXP, SEXP index_obsSEXP, SEXP delta_x_allSEXP, SEXP outputSEXP, SEXP sigma_2_hatSEXP, SEXP kernel_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXd >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const bool >::type have_noise(have_noiseSEXP);
    Rcpp::traits::input_parameter< const VectorXi >::type index_obs(index_obsSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type delta_x_all(delta_x_allSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type output(outputSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_2_hat(sigma_2_hatSEXP);
    Rcpp::traits::input_parameter< const String >::type kernel_type(kernel_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Kalman_smoother(param, have_noise, index_obs, delta_x_all, output, sigma_2_hat, kernel_type));
    return rcpp_result_gen;
END_RCPP
}
// Sample_KF
MatrixXd Sample_KF(const List GG, const List W, const Eigen::MatrixXd C0, const double VV, const String kernel_type, const int sample_type);
RcppExport SEXP _FastGaSP_Sample_KF(SEXP GGSEXP, SEXP WSEXP, SEXP C0SEXP, SEXP VVSEXP, SEXP kernel_typeSEXP, SEXP sample_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type GG(GGSEXP);
    Rcpp::traits::input_parameter< const List >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type C0(C0SEXP);
    Rcpp::traits::input_parameter< const double >::type VV(VVSEXP);
    Rcpp::traits::input_parameter< const String >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< const int >::type sample_type(sample_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Sample_KF(GG, W, C0, VV, kernel_type, sample_type));
    return rcpp_result_gen;
END_RCPP
}
// Sample_KF_post
MatrixXd Sample_KF_post(const VectorXi index_obs, const List C_R_K_Q, const Eigen::MatrixXd W0, const List GG, const List W, const double VV, const VectorXd output, String kernel_type, const int sample_type);
RcppExport SEXP _FastGaSP_Sample_KF_post(SEXP index_obsSEXP, SEXP C_R_K_QSEXP, SEXP W0SEXP, SEXP GGSEXP, SEXP WSEXP, SEXP VVSEXP, SEXP outputSEXP, SEXP kernel_typeSEXP, SEXP sample_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXi >::type index_obs(index_obsSEXP);
    Rcpp::traits::input_parameter< const List >::type C_R_K_Q(C_R_K_QSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type W0(W0SEXP);
    Rcpp::traits::input_parameter< const List >::type GG(GGSEXP);
    Rcpp::traits::input_parameter< const List >::type W(WSEXP);
    Rcpp::traits::input_parameter< const double >::type VV(VVSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type output(outputSEXP);
    Rcpp::traits::input_parameter< String >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< const int >::type sample_type(sample_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Sample_KF_post(index_obs, C_R_K_Q, W0, GG, W, VV, output, kernel_type, sample_type));
    return rcpp_result_gen;
END_RCPP
}
