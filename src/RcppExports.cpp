// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/FastGaSP.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// Construct_W0
MatrixXd Construct_W0(const double sigma2, const double lambda);
RcppExport SEXP _FastGaSP_Construct_W0(SEXP sigma2SEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_W0(sigma2, lambda));
    return rcpp_result_gen;
END_RCPP
}
// Construct_G
List Construct_G(Eigen::VectorXd delta_x, double lambda);
RcppExport SEXP _FastGaSP_Construct_G(SEXP delta_xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_G(delta_x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// Construct_W
List Construct_W(double sigma2, Eigen::VectorXd delta_x, double lambda, MatrixXd W0);
RcppExport SEXP _FastGaSP_Construct_W(SEXP sigma2SEXP, SEXP delta_xSEXP, SEXP lambdaSEXP, SEXP W0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type W0(W0SEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_W(sigma2, delta_x, lambda, W0));
    return rcpp_result_gen;
END_RCPP
}
// Get_Q_K
List Get_Q_K(const List GG, const List W, const Eigen::MatrixXd C0, const double VV);
RcppExport SEXP _FastGaSP_Get_Q_K(SEXP GGSEXP, SEXP WSEXP, SEXP C0SEXP, SEXP VVSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type GG(GGSEXP);
    Rcpp::traits::input_parameter< const List >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type C0(C0SEXP);
    Rcpp::traits::input_parameter< const double >::type VV(VVSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Q_K(GG, W, C0, VV));
    return rcpp_result_gen;
END_RCPP
}
// Get_log_det_S2
List Get_log_det_S2(const Eigen::VectorXd param, const bool have_noise, const Eigen::VectorXd delta_x, const Eigen::VectorXd output);
RcppExport SEXP _FastGaSP_Get_log_det_S2(SEXP paramSEXP, SEXP have_noiseSEXP, SEXP delta_xSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const bool >::type have_noise(have_noiseSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_log_det_S2(param, have_noise, delta_x, output));
    return rcpp_result_gen;
END_RCPP
}
// Get_C_R_K_pred
List Get_C_R_K_pred(const VectorXi index, const List GG, const List W, const Eigen::MatrixXd C0, double VV);
RcppExport SEXP _FastGaSP_Get_C_R_K_pred(SEXP indexSEXP, SEXP GGSEXP, SEXP WSEXP, SEXP C0SEXP, SEXP VVSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXi >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const List >::type GG(GGSEXP);
    Rcpp::traits::input_parameter< const List >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type C0(C0SEXP);
    Rcpp::traits::input_parameter< double >::type VV(VVSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_C_R_K_pred(index, GG, W, C0, VV));
    return rcpp_result_gen;
END_RCPP
}
// Get_m_a_pred
List Get_m_a_pred(const VectorXi index, const Eigen::VectorXd output_vec, const List GG, const Eigen::MatrixXd K);
RcppExport SEXP _FastGaSP_Get_m_a_pred(SEXP indexSEXP, SEXP output_vecSEXP, SEXP GGSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXi >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type output_vec(output_vecSEXP);
    Rcpp::traits::input_parameter< const List >::type GG(GGSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_m_a_pred(index, output_vec, GG, K));
    return rcpp_result_gen;
END_RCPP
}
// Get_S_KK
List Get_S_KK(const VectorXi index, const List GG, const List C, const List R);
RcppExport SEXP _FastGaSP_Get_S_KK(SEXP indexSEXP, SEXP GGSEXP, SEXP CSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXi >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const List >::type GG(GGSEXP);
    Rcpp::traits::input_parameter< const List >::type C(CSEXP);
    Rcpp::traits::input_parameter< const List >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_S_KK(index, GG, C, R));
    return rcpp_result_gen;
END_RCPP
}
// Get_s_1st
MatrixXd Get_s_1st(const List m, const List a, const List C, const List KK);
RcppExport SEXP _FastGaSP_Get_s_1st(SEXP mSEXP, SEXP aSEXP, SEXP CSEXP, SEXP KKSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type m(mSEXP);
    Rcpp::traits::input_parameter< const List >::type a(aSEXP);
    Rcpp::traits::input_parameter< const List >::type C(CSEXP);
    Rcpp::traits::input_parameter< const List >::type KK(KKSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_s_1st(m, a, C, KK));
    return rcpp_result_gen;
END_RCPP
}
// Kalman_smoother
List Kalman_smoother(const VectorXd param, const bool have_noise, const VectorXi index_obs, const VectorXd delta_x_all, const VectorXd output, const double sigma_2_hat);
RcppExport SEXP _FastGaSP_Kalman_smoother(SEXP paramSEXP, SEXP have_noiseSEXP, SEXP index_obsSEXP, SEXP delta_x_allSEXP, SEXP outputSEXP, SEXP sigma_2_hatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXd >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const bool >::type have_noise(have_noiseSEXP);
    Rcpp::traits::input_parameter< const VectorXi >::type index_obs(index_obsSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type delta_x_all(delta_x_allSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type output(outputSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_2_hat(sigma_2_hatSEXP);
    rcpp_result_gen = Rcpp::wrap(Kalman_smoother(param, have_noise, index_obs, delta_x_all, output, sigma_2_hat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FastGaSP_Construct_W0", (DL_FUNC) &_FastGaSP_Construct_W0, 2},
    {"_FastGaSP_Construct_G", (DL_FUNC) &_FastGaSP_Construct_G, 2},
    {"_FastGaSP_Construct_W", (DL_FUNC) &_FastGaSP_Construct_W, 4},
    {"_FastGaSP_Get_Q_K", (DL_FUNC) &_FastGaSP_Get_Q_K, 4},
    {"_FastGaSP_Get_log_det_S2", (DL_FUNC) &_FastGaSP_Get_log_det_S2, 4},
    {"_FastGaSP_Get_C_R_K_pred", (DL_FUNC) &_FastGaSP_Get_C_R_K_pred, 5},
    {"_FastGaSP_Get_m_a_pred", (DL_FUNC) &_FastGaSP_Get_m_a_pred, 4},
    {"_FastGaSP_Get_S_KK", (DL_FUNC) &_FastGaSP_Get_S_KK, 4},
    {"_FastGaSP_Get_s_1st", (DL_FUNC) &_FastGaSP_Get_s_1st, 4},
    {"_FastGaSP_Kalman_smoother", (DL_FUNC) &_FastGaSP_Kalman_smoother, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_FastGaSP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
